{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "inputBankFile",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "stage_blob_bankfile",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				},
				{
					"name": "filter1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     p_filemaster_id as integer (0),",
				"     p_container as string,",
				"     p_directory as string,",
				"     p_filename as string",
				"}",
				"source(output(",
				"          Column_1 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 derive(fmid = $p_filemaster_id,",
				"          RecordTypeCode = substring(Column_1,1,1),",
				"          TransactionCode = substring(Column_1,2,2),",
				"          ReceivingDFIIdentification = ltrim(substring(Column_1, 4, 8)),",
				"          CheckDigit = ltrim(substring(Column_1, 12, 1)),",
				"          DFIAccountNumber = ltrim(substring(Column_1, 13, 17)),",
				"          Amount = ltrim(substring(Column_1, 30, 10)),",
				"          IdentificationNumber = ltrim(substring(Column_1, 40, 15)),",
				"          Name = ltrim(substring(Column_1, 55, 22)),",
				"          DiscretionaryDataPaymentCode = ltrim(substring(Column_1, 77, 2)),",
				"          AddendaRecordIndicator = ltrim(substring(Column_1, 79, 1)),",
				"          TraceNumber = ltrim(substring(Column_1, 80, 15)),",
				"          company_date = iif(left(Column_1,1)==\"5\", ltrim(substring(Column_1,64,6)),\"\"),",
				"          effective_date = iif(left(Column_1,1)==\"5\", ltrim(substring(Column_1,70,6)),\"\")) ~> derivedColumn1",
				"filter1 select(mapColumn(",
				"          Column_1,",
				"          fmid,",
				"          RecordTypeCode,",
				"          TransactionCode,",
				"          ReceivingDFIIdentification,",
				"          CheckDigit,",
				"          DFIAccountNumber,",
				"          Amount,",
				"          IdentificationNumber,",
				"          Name,",
				"          DiscretionaryDataPaymentCode,",
				"          AddendaRecordIndicator,",
				"          TraceNumber,",
				"          company_date,",
				"          effective_date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"derivedColumn1 filter(RecordTypeCode == \"1\" || RecordTypeCode == \"5\" || RecordTypeCode == \"6\") ~> filter1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as long,",
				"          raw_filemaster_id as long,",
				"          datarow as string,",
				"          Record_Type_Code as string,",
				"          Transaction_Code as string,",
				"          Receiving_DFI_Identification as string,",
				"          Check_Digit as string,",
				"          DFI_Account_Number as string,",
				"          Amount as string,",
				"          Identification_Number as string,",
				"          Name as string,",
				"          Discretionary_Data_Payment_Code as string,",
				"          Addenda_Record_Indicator as string,",
				"          Trace_Number as string,",
				"          Company_Descriptive_Date as string,",
				"          Effective_Date as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          raw_filemaster_id = fmid,",
				"          datarow = Column_1,",
				"          Record_Type_Code = RecordTypeCode,",
				"          Transaction_Code = TransactionCode,",
				"          Receiving_DFI_Identification = ReceivingDFIIdentification,",
				"          Check_Digit = CheckDigit,",
				"          DFI_Account_Number = DFIAccountNumber,",
				"          Amount,",
				"          Identification_Number = IdentificationNumber,",
				"          Name,",
				"          Discretionary_Data_Payment_Code = DiscretionaryDataPaymentCode,",
				"          Addenda_Record_Indicator = AddendaRecordIndicator,",
				"          Trace_Number = TraceNumber,",
				"          Company_Descriptive_Date = company_date,",
				"          Effective_Date = effective_date",
				"     )) ~> sink1"
			]
		}
	}
}